<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href=""> <!--CHECK put favicon here -->

    <title>When is your Email Read??</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="custom.css" rel="stylesheet">

    <!-- Just for debugging purposes. Don't actually copy this line! -->
    <!--[if lt IE 9]><script src="js/ie8-responsive-file-warning.js"></script><![endif]-->

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>

    <!-- Static navbar -->
    <div class="navbar navbar-default navbar-static-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
        </div>
        <div class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li><a href="index.htm"><b>Home</b></a></li>
            <li><a href="resume/"><b>Resume</b></a></li>            
            <li><a href="index.htm"><b>Blogs</b></a></li>            

          <!--    <li  class = "active" class="dropdown"> -->
          <!--     <a href="/index.htm" class="dropdown-toggle" data-toggle="dropdown"><b>Blogs</b> <b class="caret"></b></a> -->
          <!--     <ul class="dropdown-menu"> -->
          <!--       <li><a href= "python-web-server.htm"><b>Python web server hosting this website</b></a></li> -->
          <!--       <li><a href="how-new-gmail-enhancement-of-picture-display-enables-email-read-recepits.htm "><b>Inline display of images in gmail</b></a></li> -->
          <!--       <li><a href="index.htm"><b>Man-in-the-middle</b></a></li> -->
          <!--   </li> -->
          <!-- </ul>         -->
         </ul>
          <!-- 
          <ul class="nav navbar-nav navbar-right">
            <li><a href="../navbar/">Default</a></li>
            <li class="active"><a href="./">Static top</a></li>
            <li><a href="../navbar-fixed-top/">Fixed top</a></li>
          </ul>
          -->
<%?php

%>
        </div><!--/.nav-collapse -->
      </div>
    </div>


    <div class="container">
        <div class="row">
            <div class="col-xs-12">
            <h2>Read acknowledgments for gmail - Get notified as soon as the recipient reads your email</h2>
            <hr />
            <p>
            Gmail users no longer have to click the "Display images below" link to view the images embedded in the email. Sheer convienience, right :) <br/>
            Until a couple months back, gmail used to give users a "Display images below" option. The inline images were displayed only after user clicked on the link.
            This was to protect users from unsafe contents and websites.
            In an announcement previous month, google announced that going forward all images will be displayed inline without requiring any action from the user. <br />
            </p>
           <p>
            
            <img src="images/gmail_display_images_below.gif" />
            </p>
            So what about the security, you might ask? Well, the way google has implemented inline images, it is convienient as well as secure. The way it works is as follows:<br />
            When you send an email with an embedded image, gmail changes the source of this image when it delivers this email.<br /> For eg:
            If your original email had this HTML (note that the image is located at one of your servers):
            <!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #008000; font-weight: bold">&lt;h2&gt;</span>Hey checkout this picture below, isn&#39;t it nice<span style="color: #008000; font-weight: bold">&lt;/h2&gt;</span>
<span style="color: #008000; font-weight: bold">&lt;img</span> <span style="color: #BB4444">src=&quot;http://yourwebsite.com/image.jpg&quot;</span><span style="color: #008000; font-weight: bold">&gt;</span>           
</pre></td></tr></table></div>

			When gmail delivers this email, it changes the URL of the images to point to a unique URL to its own caching proxy servers, so your email (as received by users) becomes something like this:
            <!-- HTML generated using hilite.me --><div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #008000; font-weight: bold">&lt;h2&gt;</span>Hey checkout this picture below, isn&#39;t it nice<span style="color: #008000; font-weight: bold">&lt;/h2&gt;</span>
<span style="color: #008000; font-weight: bold">&lt;img</span> <span style="color: #BB4444">src=&quot;https://ci3.googleusercontent.com/proxy/WxQ-yh9IXDVQnZA0Q1CXi-1DSWK4We8g31SbvqKaQSGczyNvlyt88R572yzv61QdfqTeMspStoG5K4Q=s0-d-e1-ft#http://yourwebsite.com/image.jpg&quot;</span><span style="color: #008000; font-weight: bold">&gt;</span>           
</pre></td></tr></table></div>

			<h3>Why does gmail change image URL and what are its implications ?</h3>
            <p>
            Okay, so the links to URLs are changed. But why, you ask? The answer is that google's caching servers visit the original URL where the image is located,
            they cache it and put a copy of it in their own servers. Google makes sure that the domain and the image is not blacklisted/malicious and only after it passes all its quality checks, it makes a copy and caches it.This keeps the end users safe, as in the recipient's browser never fetches the image from your(origin) server. 
            
            </p>
			There are couple interesting ramifications of this:
            <ul>
            <li>You never contact the origin server. Therefore the origin server never gets HTTP GET requests from individual end users who are opening the email.</li>
            <li>You are safe from any malicious attack that the attacker(sender of email) could have mounted if you visited the origin server</li>
            <li>Images load up much faster. You connectivity with google servers will be far better (usually) than with the origin server. Since its google who serves the image now, the image and the email loads faster.</li>
            <li>Its very very convenient to have images load up by default</li>
            </ul>
            
            <h4>When does google cache the image and how many times ?</h4>
            Now here is the interesting part. Gmail caches the image not when you send the email, but actually when the recepient opens it. There are obvious benefits of this.
            For instance if the other person never opens the email, google never caches it (and saves its CPU, network bandwidth, disk space). <br />
            So for example if you send an email with embedded images to 100 recipients, gmail will cache the image only when the first recipient opens the email. When other 99 recipients open the email, it now knows that it has a cached copy of the image and server has that.<br >
			
            <h4>Okay but how will all this help me in getting read email acknowledgments ?</h4>
            Here's how. The following steps will result in getting read email acknowledgments:
            <ol>
            <li>Create an HTML email with a 1x1 pixel image with an unique name (eg. img-23489823.jpg).</li>
            <ul>
              <li>Note that an HTML email can't be sent directly from gmail interface. Use scripting language or other email software like MS Outlook to send HTML emails</li>
              </ul>
            <li>Send the email</li>
            <li>Monitor your server logs to see a hit for this particular image (img-23489823.jpg)</li>
            <ul>
              <li>If and when a GET request is issued, thats when the recipient of the email opened the email.</li>
              </ul>
            </ol>
           
            <h4>Monitor server logs! Seriously! I don't have a server</h4>
            I understand. Not everyone has access to a web-server and its logs. However, you still have some hope.<br>
            You can still do this trick without having to monitor a server log. <strong>Note that I've not extensively tested this method</strong>.
            In the step 1 above, just replace the image with a bit.ly link of an image.<br>
			For eg. Identify an image, create a bit.ly url link for that image. Eg. <a href="http://bit.ly/1i5GttZ" target="_blank">http://bit.ly/1i5GttZ</a>.
            Instead of the URL of the direct image, use this bit.ly URL in your HTML email. Later on you can keep checking the stats on this URL by checking <br>
			<a href="http://bit.ly/1i5GttZ+" target="_blank">http://bit.ly/1i5GttZ+</a>. Notice that appending a <b>+</b> sign to the bit.ly URL shows the stats 
            report of the URL's access. Whenever someone reads your email, the bitly stats page will capture the time.
            
			<h3>Demostration</h3>
            Everyone loves practicals, right. So here is a step by step demo:
            <ol>
            <li>
            <h4>Create an HTML email.</h4>
            I've used ruby to create and send an email, the ruby code to send email is as follows:
            <!-- HTML generated using hilite.me -->
            <div style="background: #f8f8f8; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #AA22FF">require</span> <span style="color: #BB4444">&#39;net/smtp&#39;</span>

username <span style="color: #666666">=</span> <span style="color: #BB4444">&#39;patel@mansi.im&#39;</span>
password <span style="color: #666666">=</span> <span style="color: #BB4444">&#39;mysecretpassword&#39;</span>

smtp <span style="color: #666666">=</span> <span style="color: #B8860B">Net</span>:<span style="color: #B8860B">:SMTP</span><span style="color: #666666">.</span>new <span style="color: #BB4444">&#39;smtp.gmail.com&#39;</span>, <span style="color: #666666">587</span>
smtp<span style="color: #666666">.</span>enable_starttls

msg <span style="color: #666666">=</span> <span style="color: #666666">&lt;&lt;</span><span style="color: #880000">EOF</span>
<span style="color: #BB4444">From: Mansi Patel &lt;patel@mansi.im&gt;</span>
<span style="color: #BB4444">To: gusto.mansi@gmail.com</span>
<span style="color: #BB4444">MIME-Version: 1.0</span>
<span style="color: #BB4444">Content-type: text/html</span>
<span style="color: #BB4444">Subject: Email with an image</span>

<span style="color: #BB4444">&lt;h2&gt;Hey, checkout this picture that I took:&lt;/h2&gt;</span>
<span style="color: #BB4444">&lt;font color=red&gt;this is in red&lt;/font&gt;</span>
<span style="color: #BB4444">&lt;img src=http://mansi.im/images/scenery2.jpg /&gt;</span>
<span style="color: #880000">EOF</span>

<span style="color: #AA22FF">puts</span> msg

<span style="color: #008800; font-style: italic"># send the email</span>
smtp<span style="color: #666666">.</span>start(<span style="color: #BB4444">&#39;gmail.com&#39;</span>,
           username,
           password, <span style="color: #B8860B">:login</span>) <span style="color: #AA22FF; font-weight: bold">do</span>
  smtp<span style="color: #666666">.</span>send_message( msg, <span style="color: #BB4444">&quot;patel@mansi.im&quot;</span>, <span style="color: #BB4444">&quot;patel@mansi.im&quot;</span> )
<span style="color: #AA22FF; font-weight: bold">end</span>
</pre></td></tr></table></div>
			</li>
			<li>
            <h4>Send the email.</h4>
            Well, just run the above script to send the email.
            <!-- HTML generated using hilite.me --><div style="background: #000000; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">mansi@fileserver:~/temp$</span> ruby mailer.rb
<span style="color: #888888">From: Mansi Patel &lt;patel@mansi.im&gt;</span>
<span style="color: #888888">To: gusto.mansi@gmail.com</span>
<span style="color: #888888">MIME-Version: 1.0</span>
<span style="color: #888888">Content-type: text/html</span>
<span style="color: #888888">Subject: Email with an image</span>

<span style="color: #888888">&lt;h2&gt;Hey, checkout this picture that I took:&lt;/h2&gt;</span>
<span style="color: #888888">&lt;font color=red&gt;this is in red&lt;/font&gt;</span>
<span style="color: #888888">&lt;img src=http://mansi.im/images/scenery2.jpg /&gt;</span>
<span style="color: #000080; font-weight: bold">mansi@fileserver:~/temp$</span>
</pre></div>

            <h5>The scripts works and here comes the email message: </h5>
            <img src="images/new_email.png" />
            </li>
			<li>
            <h4>Open the email. Keep your server logs open to see any GET requests for the image from google.</h4>
            
			On opening the email, you can see the image embedded: <br /><br>
			<img src="images/email_opened.png" style="border-width: 3px;"/>
            <br/><br/>
            Sure enough, there is a corresponding hit logged in the web-server logs.<br />
            It shows that the email was read precisely at <b>11:43:09 PM</b>:
            <img src="images/apache_log_entry.png" style="border-width: 3px;"/>
            </li>
            </ol>
		<h3>Conclusion</h3>
        This article shows that it is now possible so get email opened acknowledgments for emails sent to gmail. <br />
        The technique relies on the fact that the embedded image in an email will be fetched by google when the user opens the email. 
        In this case we kept the image at a server whose logs we had access to. <br />
        This is only possible because now gmail directly displays the embedded image instead of asking permissions from the user.
            </div>
        </div>
    </div> <!-- /container -->
    <div class="footer">
      <p> Mansi Patel &copy; 2015</p>
    </div>

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="js/bootstrap.min.js"></script>

  </body>
</html>
